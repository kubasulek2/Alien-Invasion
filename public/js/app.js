$(()=>{const t=new Audio("../music/Quirky-Action2.mp3"),e=$("#game");let s;t.addEventListener("ended",function(){this.currentTime=0,this.play()},!1);const i={shot:new Audio("../music/shot.mp3"),disabled:!1,subject:$("#cursor"),mouseX:0,mouseY:0,xPos:0,yPos:0,clear:"",drawCursor:function(){this.xPos+=this.mouseX-this.xPos-25,this.yPos+=this.mouseY-this.yPos-25,this.subject.css({left:this.xPos,top:this.yPos})},animateCursor:function(t){let e,s=Date.now,o=window.requestAnimationFrame,n=s(),a=()=>{s()-n<t||(n+=t,i.drawCursor()),e||o(a)};return o(a),this.clear=function(){e=1}},handleClick:function(){this.disabled||(this.shot.play(),this.subject.addClass("reload")),this.disabled=!0,window.setTimeout(()=>{this.disabled=!1,this.subject.removeClass("reload")},1500)}};function o(){this.boxes=$(),this.level=1,this.enemiesData=[],this.startNewGame=function(){window.setInterval(()=>{})},this.drawEnemy=function(){Math.random()},this.levelUp=function(){},this.animateStart=function(){const t=$("#countDown");let e=3;t.addClass("countAnimation");let s=window.setInterval(()=>{e--,t.text(e),e<0&&(t.text("Start"),e<-1&&(t.text("3"),t.removeClass("countAnimation"),window.clearInterval(s)))},500)}}i.animateCursor(1),e.on("mousemove",function(t){i.mouseX=t.pageX-e.offset().left,i.mouseY=t.pageY-e.offset().top}),e.on("mouseenter",function(){i.subject.css("display","block")}),e.on("mouseleave",function(){i.subject.removeAttr("style")}),e.on("click",()=>{i.handleClick()}),$("#start").on("click",()=>{(s=new o).animateStart(),$(".alien").addClass("animation1").addClass("level1")}),$(".alien").on("click",function(t){i.disabled||$(this).fadeOut(400,()=>{this.remove()})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyIkIiwic291bmR0cmFjayIsIkF1ZGlvIiwiZ2FtZSIsIm5ld0dhbWUiLCJhZGRFdmVudExpc3RlbmVyIiwidGhpcyIsImN1cnJlbnRUaW1lIiwicGxheSIsInNob3QiLCJkaXNhYmxlZCIsInN1YmplY3QiLCJtb3VzZVgiLCJtb3VzZVkiLCJ4UG9zIiwieVBvcyIsImNsZWFyIiwiZHJhd0N1cnNvciIsImNzcyIsImxlZnQiLCJ0b3AiLCJhbmltYXRlQ3Vyc29yIiwicmVxdWVzdEFuaW1hdGlvbiIsImRhdGVOb3ciLCJzdGFydCIsInN0b3AiLCJ3aW5kb3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbEZ1bmMiLCJkZWxheSIsImN1cnNvciIsImhhbmRsZUNsaWNrIiwiYWRkQ2xhc3MiLCJzZXRUaW1lb3V0IiwicmVtb3ZlQ2xhc3MiLCJzdGFydE5ld0dhbWUiLCJzZXRJbnRlcnZhbCIsImxldmVsIiwiZHJhd0VuZW15IiwiZW5lbXlMb2NhdGlvbiIsImNvdW50ZXIiLCJNYXRoIiwicmFuZG9tIiwibGV2ZWxVcCIsImNvdW50RG93biIsInRleHQiLCJjbGVhckludGVydmFsIiwiR2FtZSIsImlkIiwiZSIsInBhZ2VZIiwib2Zmc2V0IiwicmVtb3ZlQXR0ciIsIm9uIiwiYW5pbWF0ZVN0YXJ0IiwiZmFkZU91dCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6IkFBQUFBLEVBQUcsS0FDQyxNQUFNQyxFQUFhLElBQUlDLE1BQU0sK0JBQ3ZCQyxFQUFPSCxFQUFFLFNBQ2YsSUFBSUksRUFFSkgsRUFBV0ksaUJBQWlCLFFBQVMsV0FDakNDLEtBQUtDLFlBQWMsRUFDbkJELEtBQUtFLFNBQ04sR0FJQ0MsTUFBQUEsRUFBVVAsQ0FDVlEsS0FBQUEsSUFBVVIsTUFGQyxxQkFHWFMsVUFBU1gsRUFDVFksUUFKV1osRUFBQSxXQUtYYSxPQUFRLEVBQ1JDLE9BTlcsRUFPWEMsS0FBTSxFQUNOQyxLQUFBQSxFQUNBQyxNQUFBQSxHQUNJQSxXQUFLSCxXQUNMUixLQUFLUyxNQUFTVCxLQUFLTyxPQUFTUCxLQUFLUyxLQUFuQixHQUNkVCxLQUFLSyxNQUFRTyxLQUFLQyxPQUFNYixLQUFLUSxLQUFNTSxHQVo1QmQsS0FBQUssUUFBQU8sSUFBQSxDQUFBQyxLQUFBYixLQUFBUSxLQUFBTSxJQUFBZCxLQUFBUyxRQWdCUE0sY0FDSUMsU0FBQUEsR0FESixJQUtRQyxFQUhKQyxFQUFNRCxLQUFBQSxJQUNORSxFQUhKQyxPQUFBQyxzQkFJSUMsRUFBQUEsSUFFSUgsRUFBTUgsS0FOZEMsSUFBQUMsRUFBQUssSUFBQUwsR0FBQUssRUFBQUMsRUFBQWIsY0FRQUssR0FBQUEsRUFBQU0sSUFDd0MsT0FBUkgsRUFBQUcsR0FBaEN0QixLQUFBVSxNQUFBLFdBQUFTLEVBQUEsSUFFSk0sWUFBYSxXQUNKekIsS0FBS0ksV0FDTkosS0FBS0csS0FBS0QsT0FDVkYsS0FBS0ssUUFBUXFCLFNBQVMsV0FLMUJOLEtBQUFBLFVBQU9PLEVBQ0hQLE9BQUFPLFdBQUEsS0FDQTNCLEtBQUtLLFVBQVF1QixFQUNmNUIsS0FIRkssUUFBQXVCLFlBQUEsV0FJSCxRQTZCRCxTQUFLQyxJQUNEVCxLQUFBQSxNQUFPVSxJQUdWOUIsS0FKRCtCLE1BQUEsRUFLQS9CLEtBQUtnQyxZQUFZLEdBQ2ZoQyxLQUFBNkIsYUFBSUksV0FETmIsT0FBQVUsWUFBQSxTQVFJOUIsS0FBQWdDLFVBQUlFLFdBUGNDLEtBQUtDLFVBRTNCcEMsS0FBS3FDLFFBQVUsYUFXUEMsS0FBQUEsYUFBVUMsV0FDVixNQUFBRCxFQUFXNUMsRUFBWCxjQUNJNEMsSUFBQUEsRUFBQUEsRUFFSUEsRUFBQUEsU0FBQUEsa0JBRUFsQixJQUFBQSxFQUFBQSxPQUFBQSxZQUFPb0IsS0FDVk4sSUFDSkksRUFBQUMsS0FBQUwsR0FWTEEsRUFBQSxJQU5KSSxFQUFBQyxLQUFBLFNBbUJITCxHQUFBLElBUG1CSSxFQUFVQyxLQUFLLEtBV3BCRCxFQUFhVixZQUFBLGtCQUNWYSxPQUFkRCxjQUFBRSxNQVBNLE1BckRWbEIsRUFBQVQsY0FBQSxHQUlJUyxFQUFBQSxHQUFBQSxZQUFnQm1CLFNBQVU5QyxHQUMxQjJCLEVBQU9qQixPQUFTb0MsRUFBRUMsTUFBUS9DLEVBQUtnRCxTQUFTL0IsS0FGNUNVLEVBQUFqQixPQUFBb0MsRUFBQUMsTUFBQS9DLEVBQUFnRCxTQUFBL0IsTUFLSVUsRUFBQUEsR0FBQUEsYUFBQSxXQURKQSxFQUFBbkIsUUFBQU8sSUFBQSxVQUFBLFdBS0lZLEVBQUFBLEdBQUFBLGFBQWVzQixXQURuQnRCLEVBQUFuQixRQUFBeUMsV0FBQSxXQUlJdEIsRUFBQUEsR0FBQUEsUUFBT0MsS0FEWEQsRUFBQUMsZ0JBdURLL0IsRUFBQSxVQUZtQnFELEdBQUEsUUFBQSxNQUR4QmpELEVBQUEsSUFBQTJDLEdBeEhKTyxlQW9IUXRELEVBQUUsVUFBVWdDLFNBQVMsY0FBY0EsU0FBUyxZQUloRGhDLEVBQUUsVUFBVXFELEdBQUcsUUFBUSxTQUFxQkosR0FDcENuQixFQUFPcEIsVUFBU1YsRUFBRU0sTUFBTWlELFFBQVEsSUFBSSxLQUNwQ2pELEtBQUtrRCIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIkKCAoKSA9PiB7XG4gICAgY29uc3Qgc291bmR0cmFjayA9IG5ldyBBdWRpbygnLi4vbXVzaWMvUXVpcmt5LUFjdGlvbjIubXAzJyk7XG4gICAgY29uc3QgZ2FtZSA9ICQoJyNnYW1lJyk7XG4gICAgbGV0IG5ld0dhbWU7XG5cbiAgICBzb3VuZHRyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWUgPSAwO1xuICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICB9LCBmYWxzZSk7XG5cblxuICAgIGNvbnN0IGN1cnNvciA9IHtcbiAgICAgICAgc2hvdDogbmV3IEF1ZGlvKCcuLi9tdXNpYy9zaG90Lm1wMycpLFxuICAgICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICAgIHN1YmplY3Q6ICQoJyNjdXJzb3InKSxcbiAgICAgICAgbW91c2VYOiAwLFxuICAgICAgICBtb3VzZVk6IDAsXG4gICAgICAgIHhQb3M6IDAsXG4gICAgICAgIHlQb3M6IDAsXG4gICAgICAgIGNsZWFyOiAnJyxcbiAgICAgICAgZHJhd0N1cnNvcjogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHRoaXMueFBvcyArPSAodGhpcy5tb3VzZVggLSB0aGlzLnhQb3MtMjUpO1xuICAgICAgICAgICAgdGhpcy55UG9zICs9ICh0aGlzLm1vdXNlWSAtIHRoaXMueVBvcy0yNSk7XG4gICAgICAgICAgICB0aGlzLnN1YmplY3QuY3NzKHtsZWZ0OiB0aGlzLnhQb3MsIHRvcDp0aGlzLnlQb3N9KTtcblxuICAgICAgICB9LFxuICAgICAgICBhbmltYXRlQ3Vyc29yOiBmdW5jdGlvbihkZWxheSkge1xuICAgICAgICAgICAgbGV0IGRhdGVOb3cgPSBEYXRlLm5vdyxcbiAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uPXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG4gICAgICAgICAgICAgICAgc3RhcnQ9ZGF0ZU5vdygpLFxuICAgICAgICAgICAgICAgIHN0b3AsXG4gICAgICAgICAgICAgICAgaW50ZXJ2YWxGdW5jPSAoKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZU5vdygpLXN0YXJ0PGRlbGF5fHwoc3RhcnQrPWRlbGF5LCAgY3Vyc29yLmRyYXdDdXJzb3IoKSk7XG4gICAgICAgICAgICAgICAgICAgIHN0b3B8fHJlcXVlc3RBbmltYXRpb24oaW50ZXJ2YWxGdW5jKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uKGludGVydmFsRnVuYyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbGVhciA9IGZ1bmN0aW9uKCl7IHN0b3A9MSB9O1xuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVDbGljazogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCl7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG90LnBsYXkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YmplY3QuYWRkQ2xhc3MoXCJyZWxvYWRcIik7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCgoKT0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJqZWN0LnJlbW92ZUNsYXNzKFwicmVsb2FkXCIpXG4gICAgICAgICAgICB9LDE1MDApXG4gICAgICAgIH1cblxuICAgIH07XG4gICAgY3Vyc29yLmFuaW1hdGVDdXJzb3IoMSk7XG4gICAgLy9jdXJzb3IuY2xlYXIoKTsgIHplYnkgemF0cnp5bWFjIGFuaW1hY2plXG5cblxuICAgIGdhbWUub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uKGUpe1xuICAgICAgICBjdXJzb3IubW91c2VYID0gZS5wYWdlWCAtIGdhbWUub2Zmc2V0KCkubGVmdDtcbiAgICAgICAgY3Vyc29yLm1vdXNlWSA9IGUucGFnZVkgLSBnYW1lLm9mZnNldCgpLnRvcDtcbiAgICB9KTtcbiAgICBnYW1lLm9uKCdtb3VzZWVudGVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjdXJzb3Iuc3ViamVjdC5jc3MoXCJkaXNwbGF5XCIsXCJibG9ja1wiKTtcbiAgICB9KTtcblxuICAgIGdhbWUub24oJ21vdXNlbGVhdmUnLGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY3Vyc29yLnN1YmplY3QucmVtb3ZlQXR0cignc3R5bGUnKVxuICAgIH0pO1xuICAgIGdhbWUub24oJ2NsaWNrJywgKCk9PntcbiAgICAgICAgY3Vyc29yLmhhbmRsZUNsaWNrKCk7XG5cbiAgICB9KTtcblxuXG5cbiAgICBmdW5jdGlvbiBHYW1lKCkge1xuICAgICAgICB0aGlzLmJveGVzID0gJCgpXG4gICAgICAgIHRoaXMubGV2ZWwgPSAxO1xuICAgICAgICB0aGlzLmVuZW1pZXNEYXRhID0gW107XG4gICAgICAgIHRoaXMuc3RhcnROZXdHYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2luZG93LnNldEludGVydmFsKCgpPT57XG5cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZHJhd0VuZW15ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxldCBlbmVteUxvY2F0aW9uID0gTWF0aC5yYW5kb20oKVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxldmVsVXAgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5hbmltYXRlU3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCBjb3VudERvd24gPSAkKCcjY291bnREb3duJyk7XG4gICAgICAgICAgICBsZXQgY291bnRlciA9IDM7XG5cbiAgICAgICAgICAgIGNvdW50RG93bi5hZGRDbGFzcyhcImNvdW50QW5pbWF0aW9uXCIpO1xuXG4gICAgICAgICAgICBsZXQgaWQgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCk9PntcbiAgICAgICAgICAgICAgICBjb3VudGVyLS07XG4gICAgICAgICAgICAgICAgY291bnREb3duLnRleHQoY291bnRlcik7XG4gICAgICAgICAgICAgICAgaWYoY291bnRlcjwwKXtcbiAgICAgICAgICAgICAgICAgICAgY291bnREb3duLnRleHQoXCJTdGFydFwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoY291bnRlcjwtMSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudERvd24udGV4dChcIjNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudERvd24ucmVtb3ZlQ2xhc3MoXCJjb3VudEFuaW1hdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sNTAwKVxuICAgICAgICB9XG4gICAgfVxuXG5cblxuICAgICQoJyNzdGFydCcpLm9uKFwiY2xpY2tcIiwgKCk9PntcbiAgICAgICAgbmV3R2FtZSA9IG5ldyBHYW1lKCk7XG4gICAgICAgIG5ld0dhbWUuYW5pbWF0ZVN0YXJ0KCk7XG4gICAgICAgICQoJy5hbGllbicpLmFkZENsYXNzKFwiYW5pbWF0aW9uMVwiKS5hZGRDbGFzcyhcImxldmVsMVwiKTtcblxuICAgICAgICAvL3NvdW5kdHJhY2sucGxheSgpXG4gICAgfSk7XG4gICAgJCgnLmFsaWVuJykub24oJ2NsaWNrJyxmdW5jdGlvbiBkZXRlY3RBbGllbihlKSB7XG4gICAgICAgIGlmKCFjdXJzb3IuZGlzYWJsZWQpJCh0aGlzKS5mYWRlT3V0KDQwMCwoKT0+e1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbn0pOyJdfQ==
